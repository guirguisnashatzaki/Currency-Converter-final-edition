// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_rbna2/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_rbna2/db_handler/db_handler.dart' as _i3;
import 'package:flutter_rbna2/models/conversionHistory.dart' as _i5;
import 'package:flutter_rbna2/models/supportedCurrencies.dart' as _i4;
import 'package:flutter_rbna2/repository/convertRepository.dart' as _i6;
import 'package:flutter_rbna2/repository/currencyRepository.dart' as _i8;
import 'package:flutter_rbna2/repository/historyRepository.dart' as _i9;
import 'package:flutter_rbna2/web_services/currency_web_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCurrencyWebService_0 extends _i1.SmartFake
    implements _i2.CurrencyWebService {
  _FakeCurrencyWebService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDBHelper_1 extends _i1.SmartFake implements _i3.DBHelper {
  _FakeDBHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupportedCurrency_2 extends _i1.SmartFake
    implements _i4.SupportedCurrency {
  _FakeSupportedCurrency_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConversionHistory_3 extends _i1.SmartFake
    implements _i5.ConversionHistory {
  _FakeConversionHistory_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConvertRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConvertRepository extends _i1.Mock implements _i6.ConvertRepository {
  MockConvertRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyWebService get currencyWebService => (super.noSuchMethod(
        Invocation.getter(#currencyWebService),
        returnValue: _FakeCurrencyWebService_0(
          this,
          Invocation.getter(#currencyWebService),
        ),
      ) as _i2.CurrencyWebService);

  @override
  _i3.DBHelper get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDBHelper_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.DBHelper);

  @override
  _i7.Future<_i5.ConversionHistory?> convert(
    String? fromCode,
    String? toCode,
    double? amount,
    String? fromName,
    String? toName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [
            fromCode,
            toCode,
            amount,
            fromName,
            toName,
          ],
        ),
        returnValue: _i7.Future<_i5.ConversionHistory?>.value(),
      ) as _i7.Future<_i5.ConversionHistory?>);
}

/// A class which mocks [CurrencyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrencyRepository extends _i1.Mock
    implements _i8.CurrencyRepository {
  MockCurrencyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyWebService get currencyWebService => (super.noSuchMethod(
        Invocation.getter(#currencyWebService),
        returnValue: _FakeCurrencyWebService_0(
          this,
          Invocation.getter(#currencyWebService),
        ),
      ) as _i2.CurrencyWebService);

  @override
  _i3.DBHelper get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDBHelper_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.DBHelper);

  @override
  _i7.Future<List<_i4.SupportedCurrency>> getAllSupportedCurrencies() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSupportedCurrencies,
          [],
        ),
        returnValue: _i7.Future<List<_i4.SupportedCurrency>>.value(
            <_i4.SupportedCurrency>[]),
      ) as _i7.Future<List<_i4.SupportedCurrency>>);

  @override
  _i7.Future<_i4.SupportedCurrency> insertCurrency(
          _i4.SupportedCurrency? currency) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertCurrency,
          [currency],
        ),
        returnValue:
            _i7.Future<_i4.SupportedCurrency>.value(_FakeSupportedCurrency_2(
          this,
          Invocation.method(
            #insertCurrency,
            [currency],
          ),
        )),
      ) as _i7.Future<_i4.SupportedCurrency>);

  @override
  _i7.Future<List<_i4.SupportedCurrency>> getAllSupportedCurrenciesFromDB() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllSupportedCurrenciesFromDB,
          [],
        ),
        returnValue: _i7.Future<List<_i4.SupportedCurrency>>.value(
            <_i4.SupportedCurrency>[]),
      ) as _i7.Future<List<_i4.SupportedCurrency>>);
}

/// A class which mocks [HistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHistoryRepository extends _i1.Mock implements _i9.HistoryRepository {
  MockHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CurrencyWebService get currencyWebService => (super.noSuchMethod(
        Invocation.getter(#currencyWebService),
        returnValue: _FakeCurrencyWebService_0(
          this,
          Invocation.getter(#currencyWebService),
        ),
      ) as _i2.CurrencyWebService);

  @override
  _i3.DBHelper get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeDBHelper_1(
          this,
          Invocation.getter(#db),
        ),
      ) as _i3.DBHelper);

  @override
  _i7.Future<_i5.ConversionHistory> insertConversion(
          _i5.ConversionHistory? conversionHistory) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertConversion,
          [conversionHistory],
        ),
        returnValue:
            _i7.Future<_i5.ConversionHistory>.value(_FakeConversionHistory_3(
          this,
          Invocation.method(
            #insertConversion,
            [conversionHistory],
          ),
        )),
      ) as _i7.Future<_i5.ConversionHistory>);

  @override
  _i7.Future<List<_i5.ConversionHistory>> getConversionsFromDB() =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversionsFromDB,
          [],
        ),
        returnValue: _i7.Future<List<_i5.ConversionHistory>>.value(
            <_i5.ConversionHistory>[]),
      ) as _i7.Future<List<_i5.ConversionHistory>>);
}
